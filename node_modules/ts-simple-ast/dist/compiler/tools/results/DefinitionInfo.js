"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var typescript_1 = require("../../../typescript");
var utils_1 = require("../../../utils");
var TextSpan_1 = require("./TextSpan");
/**
 * Definition info.
 */
var DefinitionInfo = /** @class */ (function () {
    /**
     * @internal
     */
    function DefinitionInfo(global, compilerObject) {
        this.global = global;
        this._compilerObject = compilerObject;
        this.sourceFile = this.global.compilerFactory.getSourceFileFromCacheFromFilePath(this.compilerObject.fileName);
    }
    Object.defineProperty(DefinitionInfo.prototype, "compilerObject", {
        /**
         * Gets the compiler object.
         */
        get: function () {
            return this._compilerObject;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the source file this reference is in.
     */
    DefinitionInfo.prototype.getSourceFile = function () {
        return this.sourceFile;
    };
    /**
     * Gets the text span.
     */
    DefinitionInfo.prototype.getTextSpan = function () {
        return new TextSpan_1.TextSpan(this.compilerObject.textSpan);
    };
    /**
     * Gets the kind.
     */
    DefinitionInfo.prototype.getKind = function () {
        return this.compilerObject.kind;
    };
    /**
     * Gets the name.
     */
    DefinitionInfo.prototype.getName = function () {
        return this.compilerObject.name;
    };
    /**
     * Gets the container kind.
     */
    DefinitionInfo.prototype.getContainerKind = function () {
        return this.compilerObject.containerKind;
    };
    /**
     * Gets the container name.
     */
    DefinitionInfo.prototype.getContainerName = function () {
        return this.compilerObject.containerName;
    };
    /**
     * Gets the definition node.
     */
    DefinitionInfo.prototype.getNode = function () {
        var start = this.getTextSpan().getStart();
        var identifier = findIdentifier(this.getSourceFile());
        return identifier == null ? undefined : identifier.getParentOrThrow();
        function findIdentifier(node) {
            if (node.getKind() === typescript_1.SyntaxKind.Identifier && node.getStart() === start)
                return node;
            try {
                for (var _a = tslib_1.__values(node.getChildrenIterator()), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var child = _b.value;
                    if (child.getPos() <= start && child.getEnd() >= start)
                        return findIdentifier(child);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return undefined;
            var e_1, _c;
        }
    };
    tslib_1.__decorate([
        utils_1.Memoize
    ], DefinitionInfo.prototype, "getTextSpan", null);
    return DefinitionInfo;
}());
exports.DefinitionInfo = DefinitionInfo;
