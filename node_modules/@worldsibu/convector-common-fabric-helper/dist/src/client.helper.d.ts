import * as Client from 'fabric-client';
import { ClientConfig, TxResult, TxListenerResult } from './models';
export declare class ClientHelper {
    client: Client;
    user: Client.User;
    config: ClientConfig;
    channel: Client.Channel;
    private _organizations;
    readonly organizations: any;
    private _channels;
    readonly channels: (Client.Channel & {
        name: string;
    })[];
    readonly networkConfig: any;
    private $initializing;
    constructor(config: ClientConfig);
    init(initKeyStore?: boolean): Promise<void>;
    useUser(name: string): Promise<void>;
    useChannel(name: string): Promise<Client.Channel>;
    invoke(fcn: string, chaincodeId: string, config?: any, ...args: any[]): Promise<TxResult>;
    query(fcn: string, chaincodeId: string, config?: any, ...args: any[]): Promise<{
        result: any;
        proposalResponse: {
            txId: Client.TransactionId;
            proposal: Client.Proposal;
            proposalResponses: Client.ProposalResponse[];
        };
    }>;
    processProposal(proposalResponse: {
        proposal: Client.Proposal;
        proposalResponses: Client.ProposalResponse[];
        txId: Client.TransactionId;
    }): Promise<TxResult>;
    listenTx(txId: string): Promise<TxListenerResult>;
    sendInstantiateProposal(request: Partial<Client.ChaincodeInstantiateUpgradeRequest>): Promise<{
        result: Client.ProposalResponse;
        proposalResponse: {
            txId: Client.TransactionId;
            proposal: Client.Proposal;
            proposalResponses: Client.ProposalResponse[];
        };
    }>;
    sendUpgradeProposal(request: Partial<Client.ChaincodeInstantiateUpgradeRequest>): Promise<{
        result: Client.ProposalResponse;
        proposalResponse: {
            txId: Client.TransactionId;
            proposal: Client.Proposal;
            proposalResponses: Client.ProposalResponse[];
        };
    }>;
    sendTransactionProposal(request: Partial<Client.ChaincodeInvokeRequest>, useAdmin?: boolean): Promise<{
        result: Client.ProposalResponse;
        proposalResponse: {
            txId: Client.TransactionId;
            proposal: Client.Proposal;
            proposalResponses: Client.ProposalResponse[];
        };
    }>;
    sendQueryTx(request: Partial<Client.ChaincodeInvokeRequest>, useAdmin?: boolean): Promise<{
        result: Client.ProposalResponse;
        proposalResponse: {
            txId: Client.TransactionId;
            proposal: Client.Proposal;
            proposalResponses: Client.ProposalResponse[];
        };
    }>;
    processTx(txRequest: Promise<Client.BroadcastResponse>, txListener: Promise<TxListenerResult>): Promise<TxResult>;
    private readSingleFileInDir(dirPath);
    private getLonelyFile(folderPath);
}
