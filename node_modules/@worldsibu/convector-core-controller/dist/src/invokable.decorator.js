"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var g = require("window-or-global");
var convector_core_errors_1 = require("@worldsibu/convector-core-errors");
require("reflect-metadata");
var param_decorator_1 = require("./param.decorator");
var controller_decorator_1 = require("./controller.decorator");
exports.invokableMetadataKey = g.ConvectorInvokableMetadataKey || Symbol('invokable');
g.ConvectorInvokableMetadataKey = exports.invokableMetadataKey;
function Invokable() {
    return function (target, key, descriptor) {
        var fn = descriptor.value;
        if (typeof fn !== 'function') {
            throw new convector_core_errors_1.ControllerInvalidFunctionError();
        }
        var invokables = Reflect.getMetadata(exports.invokableMetadataKey, target.constructor) || {};
        Reflect.defineMetadata(exports.invokableMetadataKey, tslib_1.__assign({}, invokables, (_a = {}, _a[key] = true, _a)), target.constructor);
        descriptor.value = function internalFn(_, args, extras) {
            if (extras === void 0) { extras = {}; }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                var schemas, namespace, ctx, e_1, error;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            schemas = Reflect.getOwnMetadata(param_decorator_1.paramMetadataKey, target, key);
                            if (!schemas) return [3, 2];
                            if (schemas.length !== args.length) {
                                throw new convector_core_errors_1.ControllerInvalidInvokeError(key, args.length, schemas.length);
                            }
                            return [4, schemas.reduce(function (result, _a, index) {
                                    var schema = _a[0], opts = _a[1], model = _a[2];
                                    return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                        var paramResult, e_2;
                                        return tslib_1.__generator(this, function (_b) {
                                            switch (_b.label) {
                                                case 0:
                                                    _b.trys.push([0, 4, , 5]);
                                                    if (!opts.update) return [3, 1];
                                                    paramResult = schema.cast(args[index], opts);
                                                    return [3, 3];
                                                case 1: return [4, schema.validate(args[index], opts)];
                                                case 2:
                                                    paramResult = _b.sent();
                                                    _b.label = 3;
                                                case 3: return [3, 5];
                                                case 4:
                                                    e_2 = _b.sent();
                                                    throw new convector_core_errors_1.ControllerInvalidArgumentError(e_2, index, args[index]);
                                                case 5:
                                                    if (model) {
                                                        try {
                                                            paramResult = new model(JSON.parse(args[index]));
                                                        }
                                                        catch (e) {
                                                            throw new convector_core_errors_1.ControllerArgumentParseError(e, index, args[index]);
                                                        }
                                                    }
                                                    return [4, result];
                                                case 6: return [2, (_b.sent()).concat([paramResult])];
                                            }
                                        });
                                    });
                                }, Promise.resolve([]))];
                        case 1:
                            args = _a.sent();
                            _a.label = 2;
                        case 2:
                            namespace = Reflect.getMetadata(controller_decorator_1.controllerMetadataKey, target.constructor);
                            ctx = Object.create(this[namespace], extras);
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4, fn.call.apply(fn, [ctx].concat(args))];
                        case 4: return [2, _a.sent()];
                        case 5:
                            e_1 = _a.sent();
                            error = new Error(e_1.message);
                            error.stack = e_1.stack;
                            throw error;
                        case 6: return [2];
                    }
                });
            });
        };
        var _a;
    };
}
exports.Invokable = Invokable;
function getInvokables(controller) {
    var namespace;
    var invokables;
    try {
        namespace = Reflect.getMetadata(controller_decorator_1.controllerMetadataKey, controller);
        if (!namespace) {
            throw new TypeError();
        }
    }
    catch (e) {
        throw new convector_core_errors_1.ControllerNamespaceMissingError(e, controller.name);
    }
    try {
        invokables = Reflect.getMetadata(exports.invokableMetadataKey, controller);
        if (!invokables) {
            throw new TypeError();
        }
    }
    catch (e) {
        throw new convector_core_errors_1.ControllerInvokablesMissingError(e, namespace);
    }
    return {
        invokables: invokables,
        namespace: namespace
    };
}
exports.getInvokables = getInvokables;
//# sourceMappingURL=invokable.decorator.js.map