"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path_1 = require("path");
var fs_1 = require("fs");
var fs_extra_1 = require("fs-extra");
var convector_common_fabric_helper_1 = require("@worldsibu/convector-common-fabric-helper");
var convector_core_chaincode_1 = require("@worldsibu/convector-core-chaincode");
var chaincodePath = path_1.dirname(require.resolve('@worldsibu/convector-core-chaincode'));
var Manager = (function (_super) {
    tslib_1.__extends(Manager, _super);
    function Manager(config) {
        var _this = _super.call(this, config) || this;
        _this.config = config;
        _this.chaincodeConfig = new convector_core_chaincode_1.Config(_this.config.controllers);
        return _this;
    }
    Manager.fromConfig = function (path) {
        var config = Manager.readConfig(path);
        return new Manager(config);
    };
    Manager.readConfig = function (path) {
        var config;
        try {
            config = JSON.parse(fs_1.readFileSync(path, 'utf8'));
        }
        catch (e) {
            throw new Error('{INVALID} Failed to read chaincode config file');
        }
        return config;
    };
    Manager.extractError = function (err) {
        if (!/chaincode error/.test(err)) {
            return;
        }
        var _a = err.match(/chaincode error \(status: (\d+), message: ([^)]*)\)/), status = _a[1], message = _a[2];
        return { status: parseInt(status, 10), message: message };
    };
    Manager.getCCName = function (packageName) {
        return packageName.replace(/@worldsibu\//, '');
    };
    Manager.prototype.init = function (initKeyStore) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, _super.prototype.init.call(this, initKeyStore)];
                    case 1:
                        _a.sent();
                        return [4, this.useChannel(this.config.channel)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    Manager.prototype.install = function (name, version, path) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Installing now...');
                        return [4, this.client.installChaincode({
                                txId: this.client.newTransactionID(true),
                                chaincodePath: path_1.resolve(process.cwd(), path),
                                chaincodeId: name,
                                chaincodeType: 'node',
                                chaincodeVersion: version,
                                targets: this.client.getPeersForOrg(undefined)
                            })
                                .catch(function (e) {
                                console.log('Error during installation', e);
                                throw e;
                            })
                                .then(function (_a) {
                                var responses = _a[0], proposal = _a[1];
                                var e = responses.find(function (res) { return res instanceof Error; });
                                if (e) {
                                    console.log('Error during installation', e);
                                    throw e;
                                }
                                console.log('Installed successfully');
                            })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    Manager.prototype.instantiate = function (name, version) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var proposalResponse;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Instantiating now...');
                        return [4, this.sendInstantiateProposal({
                                args: args,
                                fcn: 'init',
                                chaincodeId: name,
                                chaincodeVersion: version,
                                'endorsement-policy': this.config.policy,
                                targets: this.client.getPeersForOrg(undefined)
                            })];
                    case 1:
                        proposalResponse = (_a.sent()).proposalResponse;
                        return [4, this.processProposal(proposalResponse)];
                    case 2:
                        _a.sent();
                        console.log('Instantiated successfully');
                        return [2];
                }
            });
        });
    };
    Manager.prototype.upgrade = function (name, version) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var proposalResponse;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Upgrading now...');
                        return [4, this.sendUpgradeProposal({
                                args: args,
                                chaincodeId: name,
                                chaincodeVersion: version,
                                'endorsement-policy': this.config.policy,
                                targets: this.client.getPeersForOrg(undefined)
                            })];
                    case 1:
                        proposalResponse = (_a.sent()).proposalResponse;
                        return [4, this.processProposal(proposalResponse)];
                    case 2:
                        _a.sent();
                        console.log('Upgraded successfully');
                        return [2];
                }
            });
        });
    };
    Manager.prototype.initControllers = function (name, adminOrUser) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var proposalResponse;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Initializing controllers now...');
                        return [4, this.sendTransactionProposal({
                                fcn: 'initControllers',
                                chaincodeId: name,
                            }, adminOrUser === true)];
                    case 1:
                        proposalResponse = (_a.sent()).proposalResponse;
                        return [4, this.processProposal(proposalResponse)];
                    case 2:
                        _a.sent();
                        console.log('Initialization successfully');
                        return [2];
                }
            });
        });
    };
    Manager.prototype.package = function (output, controllers, update) {
        if (controllers === void 0) { controllers = this.chaincodeConfig.getPackages(); }
        if (update === void 0) { update = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            var e_1, e_2, json, pkg, packagesFolderPath, e_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        output = path_1.resolve(process.cwd(), output);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, fs_extra_1.ensureDir(output)];
                    case 2:
                        _a.sent();
                        return [3, 4];
                    case 3:
                        e_1 = _a.sent();
                        throw new Error('The output is not a valid directory');
                    case 4:
                        if (!!update) return [3, 6];
                        return [4, fs_extra_1.remove(output)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4, fs_extra_1.copy(chaincodePath, output)];
                    case 7:
                        _a.sent();
                        return [3, 9];
                    case 8:
                        e_2 = _a.sent();
                        throw new Error('Error while copying the base chaincode to the output path');
                    case 9:
                        json = fs_1.readFileSync(path_1.join(chaincodePath, '../../package.json'), 'utf8');
                        pkg = JSON.parse(json);
                        delete pkg.watch;
                        delete pkg.devDependencies;
                        pkg.devDependencies = pkg.chaincodeDevDependencies || {};
                        packagesFolderPath = path_1.join(output, 'packages');
                        _a.label = 10;
                    case 10:
                        _a.trys.push([10, 13, , 14]);
                        return [4, fs_extra_1.emptyDir(packagesFolderPath)];
                    case 11:
                        _a.sent();
                        return [4, fs_extra_1.mkdirp(packagesFolderPath)];
                    case 12:
                        _a.sent();
                        return [3, 14];
                    case 13:
                        e_3 = _a.sent();
                        return [3, 14];
                    case 14: return [4, Object.keys(controllers).reduce(function (pkgs, name) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var packages, packagePath, e_4, _a, _b;
                            return tslib_1.__generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0: return [4, pkgs];
                                    case 1:
                                        packages = _c.sent();
                                        if (!controllers[name].startsWith('file:')) {
                                            return [2, tslib_1.__assign({}, packages, (_a = {}, _a[name] = controllers[name], _a))];
                                        }
                                        packagePath = path_1.resolve(process.cwd(), controllers[name].replace(/^file:/, ''));
                                        return [4, fs_extra_1.mkdirp(path_1.join(packagesFolderPath, name))];
                                    case 2:
                                        _c.sent();
                                        return [4, fs_extra_1.copy(packagePath, path_1.join(packagesFolderPath, name))];
                                    case 3:
                                        _c.sent();
                                        _c.label = 4;
                                    case 4:
                                        _c.trys.push([4, 6, , 7]);
                                        return [4, fs_extra_1.emptyDir(path_1.join(packagesFolderPath, name, 'node_modules'))];
                                    case 5:
                                        _c.sent();
                                        return [3, 7];
                                    case 6:
                                        e_4 = _c.sent();
                                        return [3, 7];
                                    case 7: return [2, tslib_1.__assign({}, packages, (_b = {}, _b[name] = "file:./packages/" + name, _b))];
                                }
                            });
                        }); }, Promise.resolve({})).catch(function (e) { console.log('Failed to resolve local references', e); return {}; })];
                    case 15:
                        controllers = _a.sent();
                        pkg.scripts = { start: pkg.scripts.start, 'start:debug': pkg.scripts['start:debug'] };
                        pkg.dependencies = tslib_1.__assign({}, pkg.dependencies, controllers);
                        fs_1.writeFileSync(path_1.join(output, 'package.json'), JSON.stringify(pkg), 'utf8');
                        if (!this.config.npmrc) return [3, 17];
                        return [4, fs_extra_1.copy(path_1.resolve(process.cwd(), this.config.npmrc), path_1.join(output, '.npmrc'))];
                    case 16:
                        _a.sent();
                        return [3, 19];
                    case 17:
                        if (!this.config.npmtoken) return [3, 19];
                        return [4, fs_extra_1.writeFile(path_1.join(output, '.npmrc'), "//registry.npmjs.org/:_authToken=" + this.config.npmtoken, 'utf8')];
                    case 18:
                        _a.sent();
                        _a.label = 19;
                    case 19:
                        fs_1.writeFileSync(path_1.join(output, 'chaincode.config.json'), JSON.stringify({ controllers: this.chaincodeConfig.dump() }), 'utf8');
                        return [2];
                }
            });
        });
    };
    return Manager;
}(convector_common_fabric_helper_1.ClientHelper));
exports.Manager = Manager;
//# sourceMappingURL=manager.js.map