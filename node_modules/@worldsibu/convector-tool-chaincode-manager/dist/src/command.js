#!/usr/bin/env node
"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path_1 = require("path");
var program = require("commander");
var manager_1 = require("./manager");
program
    .command('package')
    .option('-o, --output <path>', 'Output directory', function (path) { return path_1.resolve(process.cwd(), path); })
    .option('-c, --config <path>', 'Configuration path', function (path) { return path_1.resolve(process.cwd(), path); })
    .option('-u, --update', 'Update the content instead of replace it')
    .action(function (cmd) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var manager;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                manager = manager_1.Manager.fromConfig(cmd.config);
                return [4, manager.package(cmd.output, undefined, cmd.update)];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); });
program
    .command('install <path> <name> <version>')
    .option('-c, --config <path>', 'Configuration path', function (path) { return path_1.resolve(process.cwd(), path); })
    .action(function (path, name, version, cmd) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var manager;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                manager = manager_1.Manager.fromConfig(cmd.config);
                return [4, manager.init()];
            case 1:
                _a.sent();
                return [4, manager.install(name, version, path)];
            case 2:
                _a.sent();
                return [2];
        }
    });
}); });
program
    .command('instantiate <name> <version>')
    .option('-c, --config <path>', 'Configuration path', function (path) { return path_1.resolve(process.cwd(), path); })
    .action(function (name, version, cmd) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var manager;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                manager = manager_1.Manager.fromConfig(cmd.config);
                return [4, manager.init()];
            case 1:
                _a.sent();
                return [4, manager.instantiate(name, version)];
            case 2:
                _a.sent();
                return [4, manager.initControllers(name)];
            case 3:
                _a.sent();
                return [2];
        }
    });
}); });
program
    .command('upgrade <name> <version>')
    .option('-c, --config <path>', 'Configuration path', function (path) { return path_1.resolve(process.cwd(), path); })
    .action(function (name, version, cmd) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var manager;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                manager = manager_1.Manager.fromConfig(cmd.config);
                return [4, manager.init()];
            case 1:
                _a.sent();
                return [4, manager.upgrade(name, version)];
            case 2:
                _a.sent();
                return [4, manager.initControllers(name)];
            case 3:
                _a.sent();
                return [2];
        }
    });
}); });
program
    .command('invoke <name> <controller> <fn> [args...]')
    .option('-u, --user <user>', 'Send the transaction with the specified enrolled user')
    .option('-c, --config <path>', 'Configuration path', function (path) { return path_1.resolve(process.cwd(), path); })
    .action(function (name, controller, fn, args, cmd) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var manager;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                manager = manager_1.Manager.fromConfig(cmd.config);
                return [4, manager.init()];
            case 1:
                _a.sent();
                return [4, manager.invoke.apply(manager, [controller + "_" + fn, name, cmd.user].concat(args))];
            case 2:
                _a.sent();
                return [2];
        }
    });
}); });
program.parse(process.argv);
//# sourceMappingURL=command.js.map