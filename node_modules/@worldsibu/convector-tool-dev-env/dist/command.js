#!/usr/bin/env node
"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var shelljs_1 = require("shelljs");
var path_1 = require("path");
var program = require("commander");
var registry_1 = require("./registry");
var fixPath = function (p) { return path_1.resolve(process.cwd(), p); };
var dockerEnv = {
    COMPOSE_PROJECT_NAME: 'net',
    FABRIC_VERSION: 'x86_64-1.1.0',
    THIRDPARTY_VERSION: 'x86_64-0.4.6'
};
var tasks = {
    createRegistry: function (keyStore, networkProfile) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, registry_1.Registry.create({
                            keyStore: keyStore,
                            networkProfile: networkProfile,
                            txTimeout: 300000
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    },
    addAdmin: function (registry, enrollmentID, enrollmentSecret, msp) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, registry.addAdmin({ enrollmentID: enrollmentID, enrollmentSecret: enrollmentSecret }, msp)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    },
    addUser: function (registry, enrollmentID, affiliation, role, admin, msp) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, registry.addUser({ role: role, enrollmentID: enrollmentID, affiliation: affiliation, }, admin, msp)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    },
    dockerStart: function () {
        return shelljs_1.exec("docker-compose -f " + path_1.join(__dirname, '../docker-compose.yml') + " up -d", { silent: true, env: dockerEnv });
    },
    dockerStop: function () {
        return shelljs_1.exec("docker-compose -f " + path_1.join(__dirname, '../docker-compose.yml') + " down", { silent: true, env: dockerEnv });
    }
};
program
    .command('add-admin <username> <password> <msp>')
    .option('-k, --keystore <keystore>', 'Key store path', fixPath)
    .option('-p, --profile <profile>', 'Network profile path', fixPath)
    .action(function (enrollmentID, enrollmentSecret, msp, cmd) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var registry;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, tasks.createRegistry(cmd.keystore, cmd.profile)];
            case 1:
                registry = _a.sent();
                return [4, tasks.addAdmin(registry, enrollmentID, enrollmentSecret, msp)];
            case 2:
                _a.sent();
                return [2];
        }
    });
}); });
program
    .command('add-user <username> <admin username> <msp>')
    .option('-a, --affiliation <affiliation>', 'User affiliation')
    .option('-r, --role <role>', 'User role')
    .option('-k, --keystore <keystore>', 'Key store path', fixPath)
    .option('-p, --profile <profile>', 'Network profile path', fixPath)
    .action(function (enrollmentID, admin, msp, cmd) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var registry;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, tasks.createRegistry(cmd.keystore, cmd.profile)];
            case 1:
                registry = _a.sent();
                return [4, tasks.addUser(registry, enrollmentID, cmd.affiliation, cmd.role, admin, msp)];
            case 2:
                _a.sent();
                return [2];
        }
    });
}); });
program.parse(process.argv);
//# sourceMappingURL=command.js.map