"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path_1 = require("path");
var fs_1 = require("fs");
var Client = require("fabric-client");
var convector_common_fabric_helper_1 = require("@worldsibu/convector-common-fabric-helper");
var Registry = (function (_super) {
    tslib_1.__extends(Registry, _super);
    function Registry(config) {
        var _this = _super.call(this, config) || this;
        _this.config = config;
        return _this;
    }
    Registry.create = function (config) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var registry;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config.keyStore = path_1.resolve(process.cwd(), config.keyStore);
                        return [4, Client.newDefaultKeyValueStore({ path: config.keyStore })];
                    case 1:
                        _a.sent();
                        registry = new Registry(config);
                        return [4, registry.init()];
                    case 2:
                        _a.sent();
                        return [2, registry];
                }
            });
        });
    };
    Registry.createFromFile = function (configPath) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var config, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        config = JSON.parse(fs_1.readFileSync(path_1.resolve(process.cwd(), configPath), 'utf8'));
                        config.keyStore = path_1.resolve(configPath, config.keyStore);
                        return [4, this.create(config)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        console.log('Error while reading config file', e_1);
                        return [3, 3];
                    case 3: return [2];
                }
            });
        });
    };
    Registry.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cryptoSuite, cryptoStore;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, _super.prototype.init.call(this)];
                    case 1:
                        _a.sent();
                        cryptoSuite = Client.newCryptoSuite();
                        cryptoStore = Client.newCryptoKeyStore({ path: this.config.keyStore });
                        cryptoSuite.setCryptoKeyStore(cryptoStore);
                        this.client.setCryptoSuite(cryptoSuite);
                        return [2];
                }
            });
        });
    };
    Registry.prototype.addAdmin = function (params, mspid) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user, ca, _a, key, certificate;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.client.getUserContext(params.enrollmentID, true)];
                    case 1:
                        user = _b.sent();
                        if (user && user.isEnrolled()) {
                            return [2, user];
                        }
                        ca = this.client.getCertificateAuthority();
                        return [4, ca.enroll(params)];
                    case 2:
                        _a = _b.sent(), key = _a.key, certificate = _a.certificate;
                        return [4, this.client.createUser({
                                mspid: mspid,
                                skipPersistence: false,
                                username: params.enrollmentID,
                                cryptoContent: {
                                    privateKeyPEM: key.toBytes(),
                                    signedCertPEM: certificate
                                }
                            })];
                    case 3: return [2, _b.sent()];
                }
            });
        });
    };
    Registry.prototype.addUser = function (params, adminUsername, mspid) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var admin, user, ca, enrollmentSecret, _a, key, certificate;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.client.getUserContext(adminUsername, true)];
                    case 1:
                        admin = _b.sent();
                        if (!admin || !admin.isEnrolled()) {
                            throw new Error("Admin " + adminUsername + " user is not enrolled " +
                                ("when trying to register user " + params.enrollmentID));
                        }
                        return [4, this.client.getUserContext(params.enrollmentID, true)];
                    case 2:
                        user = _b.sent();
                        if (user && user.isEnrolled()) {
                            return [2, user];
                        }
                        ca = this.client.getCertificateAuthority();
                        return [4, ca.register(params, admin)];
                    case 3:
                        enrollmentSecret = _b.sent();
                        return [4, ca.enroll({
                                enrollmentSecret: enrollmentSecret,
                                enrollmentID: params.enrollmentID
                            })];
                    case 4:
                        _a = _b.sent(), key = _a.key, certificate = _a.certificate;
                        return [4, this.client.createUser({
                                mspid: mspid,
                                skipPersistence: false,
                                username: params.enrollmentID,
                                cryptoContent: {
                                    privateKeyPEM: key.toBytes(),
                                    signedCertPEM: certificate
                                }
                            })];
                    case 5: return [2, _b.sent()];
                }
            });
        });
    };
    return Registry;
}(convector_common_fabric_helper_1.ClientHelper));
exports.Registry = Registry;
//# sourceMappingURL=registry.js.map