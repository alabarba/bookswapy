"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var uuid = require("uuid/v1");
var convector_core_chaincode_1 = require("@worldsibu/convector-core-chaincode");
var fabric_mock_stub_1 = require("@theledger/fabric-mock-stub");
var convector_core_1 = require("@worldsibu/convector-core");
var fabric_chaincode_utils_1 = require("@theledger/fabric-chaincode-utils");
fabric_chaincode_utils_1.Transform.isObject = function (data) { return data !== null && typeof data === 'object'; };
var MockControllerAdapter = (function () {
    function MockControllerAdapter() {
        this.stub = new fabric_mock_stub_1.ChaincodeMockStub('Participant', new convector_core_chaincode_1.Chaincode());
    }
    MockControllerAdapter.prototype.init = function (config) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.stub.mockInit(uuid(), [])];
                    case 1:
                        _a.sent();
                        return [4, this.stub.mockInvoke(uuid(), ['initControllers', JSON.stringify(config)])];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    MockControllerAdapter.prototype.getById = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.stub.getState(id)];
                    case 1:
                        response = _a.sent();
                        return [2, fabric_mock_stub_1.Transform.bufferToObject(response)];
                }
            });
        });
    };
    MockControllerAdapter.prototype.invoke = function (controller, name, config) {
        if (config === void 0) { config = {}; }
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var transientMap, response, err;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.stub['usercert'] = config.user ? config.user : this.stub['usercert'];
                        transientMap = Object.keys(config.transient || {}).reduce(function (map, k) {
                            var v = config.transient[k];
                            map.set(k, Buffer.from(typeof v === 'string' ? v : JSON.stringify(v)));
                            return map;
                        }, new Map());
                        return [4, this.stub.mockInvoke(uuid(), [
                                controller + "_" + name
                            ].concat(args.map(function (arg) { return typeof arg === 'object' ? JSON.stringify(arg) : arg.toString(); })), transientMap)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 500) {
                            err = response.message.toString();
                            try {
                                err = JSON.parse(JSON.parse(err));
                            }
                            catch (e) {
                                try {
                                    err = JSON.parse(err);
                                }
                                catch (e) {
                                }
                            }
                            throw new convector_core_1.ClientResponseError([{
                                    error: err,
                                    response: response
                                }]);
                        }
                        return [2, tslib_1.__assign({}, response, { result: fabric_mock_stub_1.Transform.bufferToObject(response.payload) })];
                }
            });
        });
    };
    return MockControllerAdapter;
}());
exports.MockControllerAdapter = MockControllerAdapter;
//# sourceMappingURL=mock.controller-adapter.js.map