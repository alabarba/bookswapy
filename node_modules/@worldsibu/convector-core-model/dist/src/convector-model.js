"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var yup = require("yup");
var convector_core_errors_1 = require("@worldsibu/convector-core-errors");
var convector_core_storage_1 = require("@worldsibu/convector-core-storage");
var validate_decorator_1 = require("../src/validate.decorator");
var default_decorator_1 = require("../src/default.decorator");
var required_decorator_1 = require("../src/required.decorator");
var validate_decorator_2 = require("../src/validate.decorator");
var ConvectorModel = (function () {
    function ConvectorModel(content) {
        if (!content) {
            return;
        }
        if (typeof content === 'string') {
            this.id = content;
            return;
        }
        this.assign(content);
    }
    ConvectorModel.schema = function () {
        return yup.object().shape(tslib_1.__assign({ id: yup.string().required(), type: yup.string() }, validate_decorator_2.getPropertiesValidation(this.prototype)));
    };
    ConvectorModel.getOne = function (id, type, storageOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var content, model;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        type = type || this;
                        return [4, convector_core_storage_1.BaseStorage.current.get(id, storageOptions)];
                    case 1:
                        content = _a.sent();
                        model = new type(content);
                        if ((content && model) && content.type !== model.type) {
                            throw new Error("Possible ID collision, element " + id + " of type " + content.type + " is not " + model.type);
                        }
                        return [2, model];
                }
            });
        });
    };
    ConvectorModel.query = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var type, content, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        type = this;
                        if (args[0] && 'type' in args[0] && args[0].type === ConvectorModel.type) {
                            type = args.shift();
                        }
                        return [4, (_a = convector_core_storage_1.BaseStorage.current).query.apply(_a, args)];
                    case 1:
                        content = _b.sent();
                        return [2, Array.isArray(content) ? content.map(function (c) { return new type(c); }) : new type(content)];
                }
            });
        });
    };
    ConvectorModel.getAll = function (type) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        type = type || new this('').type;
                        return [4, ConvectorModel.query(this, { selector: { type: type } })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    ConvectorModel.prototype.update = function (content) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.assign(content);
                        return [4, this.save()];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    ConvectorModel.prototype.fetch = function (storageOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var content;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, convector_core_storage_1.BaseStorage.current.get(this.id, storageOptions)];
                    case 1:
                        content = _a.sent();
                        if (content.type !== this.type) {
                            throw new Error("Possible ID collision, element " + this.id + " of type " + content.type + " is not " + this.type);
                        }
                        this.assign(content);
                        return [2];
                }
            });
        });
    };
    ConvectorModel.prototype.history = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            var history;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, convector_core_storage_1.BaseStorage.current.history(this.id)];
                    case 1:
                        history = _a.sent();
                        return [2, history.map(function (item) { return ({
                                txId: item.tx_id,
                                value: new _this.constructor(item.value),
                                timestamp: item.timestamp
                            }); })];
                }
            });
        });
    };
    ConvectorModel.prototype.save = function (storageOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.assign(default_decorator_1.getDefaults(this), true);
                        if (!required_decorator_1.ensureRequired(this)) {
                            if (!this.id) {
                                throw new Error("Model " + this.type + " is missing the 'id' property \n" + JSON.stringify(this));
                            }
                            else {
                                throw new Error("Model " + this.type + " is not complete\n" + JSON.stringify(this) + ".\n        Check your model definition for more details.");
                            }
                        }
                        convector_core_errors_1.InvalidIdError.test(this.id);
                        return [4, convector_core_storage_1.BaseStorage.current.set(this.id, this, storageOptions)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    ConvectorModel.prototype.clone = function () {
        return new this.constructor(Object.assign({}, this));
    };
    ConvectorModel.prototype.toJSON = function (skipEmpty) {
        var _this = this;
        if (skipEmpty === void 0) { skipEmpty = false; }
        var protos = [];
        var children = this;
        do {
            children = Object.getPrototypeOf(children);
            protos.push(children);
        } while (children['__proto__'].constructor.name !== ConvectorModel.name);
        var descriptors = protos.reduce(function (result, proto) { return result.concat(Object.keys(proto)
            .map(function (key) { return [key, Object.getOwnPropertyDescriptor(proto, key)]; })); }, []);
        var base = Object.keys(this).concat('id')
            .filter(function (k) { return !k.startsWith('_'); })
            .filter(function (k) { return !skipEmpty || !(_this[k] === undefined || _this[k] === null); })
            .reduce(function (result, key) {
            return (tslib_1.__assign({}, result, (_a = {}, _a[key] = _this[key], _a)));
            var _a;
        }, {});
        return descriptors
            .reduce(function (result, _a) {
            var key = _a[0], desc = _a[1];
            var hasGetter = desc && typeof desc.get === 'function';
            if (hasGetter) {
                result[key] = desc.get.call(_this);
            }
            if (skipEmpty && (result[key] === undefined || result[key] === null)) {
                delete result[key];
            }
            if (result[key] instanceof ConvectorModel) {
                result[key] = result[key].toJSON(true);
            }
            return result;
        }, base);
    };
    ConvectorModel.prototype.delete = function (storageOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, convector_core_storage_1.BaseStorage.current.delete(this.id, storageOptions)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    ConvectorModel.prototype.assign = function (content, defaults) {
        if (defaults === void 0) { defaults = false; }
        var validated = ['id', 'type'].concat(validate_decorator_2.getValidatedProperties(this));
        var filteredContent = Object.keys(content)
            .map(function (key) { return key.replace(/^_/, ''); })
            .filter(function (key) { return validated.indexOf(key) >= 0; })
            .reduce(function (result, key) {
            return (tslib_1.__assign({}, result, (_a = {}, _a[key] = content[key] !== undefined ? content[key] : content['_' + key], _a)));
            var _a;
        }, {});
        var afterDefaults = defaults ? this.toJSON(true) : {};
        Object.assign(this, filteredContent, afterDefaults);
    };
    ConvectorModel.type = 'io.convector.model';
    tslib_1.__decorate([
        required_decorator_1.Required(),
        validate_decorator_1.Validate(yup.string())
    ], ConvectorModel.prototype, "id", void 0);
    return ConvectorModel;
}());
exports.ConvectorModel = ConvectorModel;
//# sourceMappingURL=convector-model.js.map