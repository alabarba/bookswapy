"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var CouchDB = require("node-couchdb");
var convector_core_1 = require("@worldsibu/convector-core");
var CouchDBStorage = (function (_super) {
    tslib_1.__extends(CouchDBStorage, _super);
    function CouchDBStorage(config, defaultDB) {
        var _this = _super.call(this) || this;
        _this.defaultDB = defaultDB;
        _this.couch = new CouchDB(config);
        return _this;
    }
    CouchDBStorage.prototype.updateDefaultDB = function (defaultDB) {
        this.defaultDB = defaultDB;
    };
    CouchDBStorage.prototype.query = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db, result, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        db = this.defaultDB;
                        if (args.length > 1) {
                            db = args.shift();
                        }
                        return [4, (_a = this.couch).get.apply(_a, [db].concat(args))];
                    case 1:
                        result = _b.sent();
                        if (result) {
                            if (result.docs) {
                                return [2, result.docs];
                            }
                            if (result.data && Array.isArray(result.data.rows)) {
                                return [2, result.data.rows.map(function (data) { return data.value; })];
                            }
                        }
                        return [2, []];
                }
            });
        });
    };
    CouchDBStorage.prototype.get = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        convector_core_1.InvalidIdError.test(id);
                        return [4, this.couch.get(this.defaultDB, id)];
                    case 1:
                        result = _a.sent();
                        return [2, result.data];
                }
            });
        });
    };
    CouchDBStorage.prototype.set = function (id, content) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                throw new Error('The method `set` in the CouchDB storage is not supported');
            });
        });
    };
    CouchDBStorage.prototype.delete = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                throw new Error('The method `delete` in the CouchDB storage is not supported');
            });
        });
    };
    CouchDBStorage.prototype.history = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                throw new Error('The method `history` in the CouchDB storage is not supported');
            });
        });
    };
    return CouchDBStorage;
}(convector_core_1.BaseStorage));
exports.CouchDBStorage = CouchDBStorage;
//# sourceMappingURL=couchdb-storage.js.map