#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
try {
    require('commander');
    require('ts-simple-ast');
}
catch (e) {
    console.error('Dependencies commander and ts-simple-ast are required for the generate-controller-interface command');
    process.exit(1);
}
var program = require("commander");
var path_1 = require("path");
var ts_simple_ast_1 = require("ts-simple-ast");
program
    .option('-c, --controller <name>', 'controller name')
    .option('-o, --output <path>', 'output folder', 'client')
    .option('-p, --project <path>', 'tsconfig project file', 'tsconfig.json')
    .parse(process.argv);
var tsconfig = path_1.join(process.cwd(), program.project);
var root = path_1.dirname(tsconfig);
var project = new ts_simple_ast_1.default({
    tsConfigFilePath: tsconfig,
    manipulationSettings: {
        quoteKind: ts_simple_ast_1.QuoteKind.Single,
        indentationText: ts_simple_ast_1.IndentationText.TwoSpaces
    }
});
project.addExistingSourceFiles(path_1.join(root, 'src/**/*.ts'));
var controllerFile = project.getSourceFiles()
    .find(function (source) { return !!source.getClass(program.controller); });
var client = controllerFile.copy(path_1.join(root, program.output, controllerFile.getBaseName()), { overwrite: true });
client.addImportDeclaration({
    moduleSpecifier: '@worldsibu/convector-core-adapter',
    namedImports: [{ name: 'ControllerAdapter' }]
});
var controller = client.getClass(program.controller);
controller.rename(program.controller + "Client");
controller.getProperties().forEach(function (prop) { return prop.remove(); });
controller.addProperty({
    name: 'name',
    scope: ts_simple_ast_1.Scope.Public,
    initializer: controller.getDecorator('Controller').getArguments()[0].getText()
}).setOrder(0);
controller.addConstructor({
    parameters: [
        {
            name: 'adapter',
            scope: ts_simple_ast_1.Scope.Public,
            type: 'ControllerAdapter'
        }, {
            name: 'user',
            scope: ts_simple_ast_1.Scope.Public,
            type: 'string',
            hasQuestionToken: true
        }
    ],
    bodyText: 'super()'
}).setOrder(1);
controller.getDecorators().forEach(function (dec) { return dec.remove(); });
controller.getMethods().forEach(function (method, i) {
    if (!method.getDecorator('Invokable')) {
        method.remove();
        return;
    }
    method.getDecorators().forEach(function (dec) { return dec.remove(); });
    var params = method.getParameters().map(function (param) {
        param.getDecorators().forEach(function (dec) { return dec.remove(); });
        return param.getName();
    }).join(', ');
    method.setBodyText(function (writer) {
        return writer.writeLine("\n      return await this.adapter.invoke(this.name, '" + method.getName() + "', this.user, " + params + ");\n    ");
    });
    method.setOrder(i + 2);
});
client.saveSync();
var indexFile = project.getSourceFile('index.ts')
    .copy(path_1.join(root, program.output, 'index.ts'), { overwrite: true });
indexFile
    .getExportDeclaration(function (exp) {
    return exp.getModuleSpecifier().getLiteralText().includes(controllerFile.getBaseNameWithoutExtension());
})
    .setModuleSpecifier("./" + controllerFile.getBaseNameWithoutExtension());
indexFile.saveSync();
//# sourceMappingURL=generate-interface.js.map