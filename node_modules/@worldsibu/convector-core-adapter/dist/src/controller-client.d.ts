import { ConvectorController } from '@worldsibu/convector-core-controller';
import { ControllerAdapter } from './controller-adapter';
export interface IConvectorControllerClient<T extends ConvectorController> {
    config: any;
    query: boolean;
    user: string | true;
    ctrl: new (content?: any) => T;
    adapter: ControllerAdapter;
    raw: boolean;
}
export declare const controllerClientMethods: {
    $withUser<T extends ConvectorController<any>>(this: IConvectorControllerClient<T>, user: string | true): ConvectorControllerClient<T>;
    $query<T extends ConvectorController<any>>(this: IConvectorControllerClient<T>): ConvectorControllerClient<T>;
    $config<T extends ConvectorController<any>>(this: IConvectorControllerClient<T>, config: any): ConvectorControllerClient<T>;
    $raw<T extends ConvectorController<any>>(this: IConvectorControllerClient<T>): ConvectorControllerClient<T>;
};
export declare type ConvectorControllerClient<T extends ConvectorController> = typeof controllerClientMethods & IConvectorControllerClient<T> & T;
export declare function ClientFactory<T extends ConvectorController>(ctrl: new (content?: any) => T, adapter: ControllerAdapter): ConvectorControllerClient<T>;
