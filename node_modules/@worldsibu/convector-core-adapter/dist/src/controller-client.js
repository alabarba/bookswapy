"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var convector_core_controller_1 = require("@worldsibu/convector-core-controller");
exports.controllerClientMethods = {
    $withUser: function (user) {
        var newClient = ClientFactory(this.ctrl, this.adapter);
        newClient.user = user;
        return newClient;
    },
    $query: function () {
        var newClient = ClientFactory(this.ctrl, this.adapter);
        newClient.query = true;
        return newClient;
    },
    $config: function (config) {
        var newClient = ClientFactory(this.ctrl, this.adapter);
        newClient.config = config;
        return newClient;
    },
    $raw: function () {
        var newClient = ClientFactory(this.ctrl, this.adapter);
        newClient.raw = true;
        return newClient;
    }
};
function ClientFactory(ctrl, adapter) {
    var client = new ctrl();
    Object.assign(client, { ctrl: ctrl, adapter: adapter, query: false, raw: false }, exports.controllerClientMethods);
    var _a = convector_core_controller_1.getInvokables(ctrl), namespace = _a.namespace, invokables = _a.invokables;
    var _loop_1 = function (fn) {
        client[fn] = function ControllerClientWrapper() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var config, res;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = tslib_1.__assign({}, this.config, { user: this.user });
                            if (!(this.query && adapter.query)) return [3, 2];
                            return [4, adapter.query.apply(adapter, [namespace, fn, config].concat(args))];
                        case 1:
                            res = _a.sent();
                            _a.label = 2;
                        case 2: return [4, adapter.invoke.apply(adapter, [namespace, fn, config].concat(args))];
                        case 3:
                            res = _a.sent();
                            return [2, typeof res === 'object' && 'result' in res && !this.raw ?
                                    res.result : res];
                    }
                });
            });
        };
    };
    for (var fn in invokables) {
        _loop_1(fn);
    }
    return client;
}
exports.ClientFactory = ClientFactory;
//# sourceMappingURL=controller-client.js.map