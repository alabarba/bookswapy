"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_1 = require("./base");
var path_1 = require("path");
var ConfigTxYamlGeneratorOptions = (function () {
    function ConfigTxYamlGeneratorOptions() {
    }
    return ConfigTxYamlGeneratorOptions;
}());
exports.ConfigTxYamlGeneratorOptions = ConfigTxYamlGeneratorOptions;
var ConfigTxYamlGenerator = (function (_super) {
    tslib_1.__extends(ConfigTxYamlGenerator, _super);
    function ConfigTxYamlGenerator(filename, path, options) {
        var _this = _super.call(this, filename, path) || this;
        _this.options = options;
        _this.contents = "---\nOrganizations:\n  - &OrdererOrg\n    Name: OrdererOrg\n    ID: OrdererMSP\n    MSPDir: ./artifacts/crypto-config/ordererOrganizations/hurley.lab/msp\n   \n\n" + _this.options.orgs.map(function (x) { return " \n  - &" + x + "\n    Name: " + x + "MSP\n    ID: " + x + "MSP\n    MSPDir: ./artifacts/crypto-config/peerOrganizations/" + x + ".hurley.lab/msp\n    AnchorPeers:\n      - Host: peer0." + x + ".hurley.lab\n        Port: 7051\n\n"; }).join('') + "\n\n\nCapabilities:\n  Channel: &ChannelCapabilities\n    V1_3: true\n  Orderer: &OrdererCapabilities\n    V1_1: true\n  Application: &ApplicationCapabilities\n    V1_3: true\n    V1_2: false\n    V1_1: false\n\nApplication: &ApplicationDefaults\n  Organizations:\n\n\n  Capabilities:\n    <<: *ApplicationCapabilities\n\nOrderer: &OrdererDefaults\n  OrdererType: solo\n\n  Addresses:\n    - orderer.hurley.lab:7050\n\n  BatchTimeout: 2s\n\n  BatchSize:\n    MaxMessageCount: 10\n    AbsoluteMaxBytes: 99 MB\n    PreferredMaxBytes: 512 KB\n\n  Organizations:\n \n\nChannel: &ChannelDefaults\n  Capabilities:\n      <<: *ChannelCapabilities\n\n\nProfiles:\n  OrgsOrdererGenesis:\n    Orderer:\n      <<: *OrdererDefaults\n      Organizations:\n        - *OrdererOrg\n      Capabilities:\n        <<: *OrdererCapabilities\n    Consortiums:\n      SampleConsortium:\n        Organizations:\n          " + _this.options.orgs.map(function (x) { return "- *" + x + "\n          "; }).join('') + "\n  OrgsChannel:\n    Consortium: SampleConsortium\n    <<: *ChannelDefaults\n    Application:\n      <<: *ApplicationDefaults\n      Capabilities:\n        <<: *ApplicationCapabilities\n      Organizations:\n        " + _this.options.orgs.map(function (x) { return "- *" + x + "\n        "; }).join('') + "\n    ";
        _this.success = path_1.join(path, 'configtx.yaml.successful');
        return _this;
    }
    return ConfigTxYamlGenerator;
}(base_1.BaseGenerator));
exports.ConfigTxYamlGenerator = ConfigTxYamlGenerator;
//# sourceMappingURL=configtx.yaml.js.map