"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_1 = require("./base");
var path_1 = require("path");
var devEnvPath = path_1.dirname(require.resolve('@worldsibu/convector-tool-dev-env'));
var NetworkRestartShOptions = (function () {
    function NetworkRestartShOptions() {
    }
    return NetworkRestartShOptions;
}());
exports.NetworkRestartShOptions = NetworkRestartShOptions;
var NetworkRestartShGenerator = (function (_super) {
    tslib_1.__extends(NetworkRestartShGenerator, _super);
    function NetworkRestartShGenerator(filename, path, options) {
        var _this = _super.call(this, filename, path) || this;
        _this.options = options;
        _this.success = path_1.join(_this.path, 'cyptofilesgenerator.sh.successful');
        _this.contents = "\n#!/bin/bash\nset +e\n\n#clean\n\nITEMS=$(docker ps -a | awk '$2~/hyperledger/ {print $1}') \n\nif [ ! -z \"$ITEMS\" ]; then\n    docker stop $(docker ps -a | awk '$2~/hyperledger/ {print $1}') \n    docker rm -f $(docker ps -a | awk '$2~/hyperledger/ {print $1}') $(docker ps -a | awk '{ print $1,$2 }' | grep dev-peer | awk '{print $1 }') || true\n    docker rmi -f $(docker images | grep dev-peer | awk '{print $3}') || true\nfi\n\n# start\nCOMPOSE_PROJECT_NAME=net FABRIC_VERSION=" + _this.options.envVars.FABRIC_VERSION + " THIRDPARTY_VERSION=" + _this.options.envVars.THIRDPARTY_VERSION + " docker-compose -f " + _this.options.networkRootPath + "/docker-compose.yaml up -d\n\n# init\n\n#!/bin/bash\nUSERS=" + _this.options.users + "\n\nfunction createchannel() {\n    SERVER=$1\n    CH=$2\n\n    echo \"Creating $CH channel block in peer $SERVER\"\n    docker exec $SERVER peer channel create  -o orderer.hurley.lab:7050 -c $CH -f /etc/hyperledger/configtx/$CH.tx\n\n    docker exec $SERVER mv $CH.block /shared/\n}\n\nfunction joinchannel() {\n    echo \"Joining $2 channel on peer $1\"\n    SERVER=$1\n    CH=$2\n    COUNTER=1\n    MAX_RETRY=5\n    DELAY=\"3\"\n\n    set -x\n    output=$(docker exec $1 peer channel join -b /shared/$2.block && echo \"pass\" || echo \"fail\")\n    set +x\n\n    if [ \"$output\" == \"fail\" ]; then\n        COUNTER=$(expr $COUNTER + 1)\n        echo \"$SERVER failed to join the channel, Retry after $DELAY seconds\"\n        sleep $DELAY\n        joinchannel $SERVER $CH\n    else\n        COUNTER=1\n    fi\n\n}\n\nfunction setanchor() {\n    " + _this.options.channels.map(function (ch) { return "\n    echo \"Creating " + ch + " anchor block in peer $1\"\n    docker exec $1 peer channel update  -o orderer.hurley.lab:7050 -c " + ch + " -f /etc/hyperledger/configtx/$1." + ch + ".tx\n\n    "; }).join('') + "\n}\n\nfunction registeradmin() {\n    node " + devEnvPath + "/command.js add-admin admin adminpw $2        -k \"" + _this.options.networkRootPath + "/.hfc-$1\"        -p \"" + _this.options.networkRootPath + "/network-profiles/$1.network-profile" + (_this.options.insideDocker ? '.inside-docker' : '') + ".yaml\"\n}\n\nfunction registeruser() {\n    node " + devEnvPath + "/command.js add-user $1 admin $4        -a \"org1\"        -r \"client\"        -k \"" + _this.options.networkRootPath + "/.hfc-$2\"        -p \"" + _this.options.networkRootPath + "/network-profiles/$2.network-profile" + (_this.options.insideDocker ? '.inside-docker' : '') + ".yaml\"\n}\n\n" + _this.options.channels.map(function (ch) { return "\ncreatechannel peer0." + _this.options.organizations[0] + ".hurley.lab " + ch + "\n\nsleep 10\n\n" + _this.options.organizations.map(function (org) { return "joinchannel peer0." + org + ".hurley.lab " + ch + "\n"; }).join('') + "\n" + _this.options.organizations.map(function (org) { return "setanchor peer0." + org + ".hurley.lab " + ch + "\n"; }).join('') + "\n\n"; }) + "\nsleep 5\n\n" + _this.options.organizations.map(function (org) { return "\necho \"Registering admin for " + org + "\"\nregisteradmin " + org + " " + org + "MSP\nwait\n"; }).join('') + "\n\n\n" + Array.apply(null, { length: _this.options.users }).map(function (user, index) { return "\n\n" + _this.options.organizations.map(function (org) { return "\necho \"Registering user" + (index + 1) + " for " + org + "\"\nregisteruser user" + (index + 1) + " " + org + " department1 " + org + "MSP \nwait\n"; }).join('') + "\n"; }).join('') + "\n\n";
        return _this;
    }
    return NetworkRestartShGenerator;
}(base_1.BaseGenerator));
exports.NetworkRestartShGenerator = NetworkRestartShGenerator;
//# sourceMappingURL=networkRestart.sh.js.map