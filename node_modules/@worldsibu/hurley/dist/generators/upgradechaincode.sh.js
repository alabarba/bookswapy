"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_1 = require("./base");
var path_1 = require("path");
var UpgradeChaincodeShOptions = (function () {
    function UpgradeChaincodeShOptions() {
    }
    return UpgradeChaincodeShOptions;
}());
exports.UpgradeChaincodeShOptions = UpgradeChaincodeShOptions;
var UpgradeChaincodeShGenerator = (function (_super) {
    tslib_1.__extends(UpgradeChaincodeShGenerator, _super);
    function UpgradeChaincodeShGenerator(filename, path, options) {
        var _this = _super.call(this, filename, path) || this;
        _this.options = options;
        _this.success = path_1.join(_this.path, 'tasks/', 'upgradechaincode.sh.successful');
        _this.contents = "\n#!/bin/bash\nset -e\n\n" + (_this.options.language === 'golang' ? "\nif [ -z \"$GOROOT\" ]; then\n    echo \"Your $GOROOT variable is not set, make sure it points to the path where you installed Go.\"\n\n    echo \"Defaulting to '/usr/local/go'. This may fail depending where you installed your Go. Please set the var accordingly to your environment\"\n\n    export GOROOT=/usr/local/go\nfi\n\nexport GOPATH=" + _this.options.networkRootPath + "\n\nrm -fr  " + _this.options.networkRootPath + "/src/go_temp_code\nmkdir -p " + _this.options.networkRootPath + "/src/go_temp_code\n\ncp -r " + _this.options.currentPath + "/ " + _this.options.networkRootPath + "/src/go_temp_code\n\n\n" + (_this.options.colConfig ? "\n    mkdir -p " + _this.options.networkRootPath + "/src/go_temp_code/collections\n    echo \"Looking for collection's config at " + path_1.resolve(process.cwd(), _this.options.colConfig) + "\"\n    cp -r " + path_1.resolve(process.cwd(), _this.options.colConfig) + " " + _this.options.networkRootPath + "/src/go_temp_code/collections\n" : "") + "\n\n" : "") + "\n\nexport FABRIC_CFG_PATH=" + _this.options.networkRootPath + "/fabric-binaries/" + _this.options.hyperledgerVersion + "/config\n\nset +e\n" + _this.options.orgs.map(function (org, index) { return "\necho \"Installing Chaincode " + _this.options.name + " version " + _this.options.version + " at " + org + "\"\n\nexport CORE_PEER_MSPCONFIGPATH=" + _this.options.networkRootPath + "/artifacts/crypto-config/peerOrganizations/" + org + ".hurley.lab/users/Admin@" + org + ".hurley.lab/msp\nexport CORE_PEER_ID=peer0." + org + ".hurley.lab\nexport CORE_PEER_ADDRESS=" + (_this.options.insideDocker ? "peer0." + org + ".hurley.lab" : 'localhost') + ":" + (_this.options.insideDocker ? '7051' : "7" + index + "51") + "\nexport CORE_PEER_LOCALMSPID=" + org + "MSP\nexport CORE_PEER_TLS_ROOTCERT_FILE=" + _this.options.networkRootPath + "/artifacts/crypto-config/peerOrganizations/" + org + ".hurley.lab/msp/tlscacerts/tlsca." + org + ".hurley.lab-cert.pem\n\n" + (_this.options.language === 'golang' ? "\n" + _this.options.networkRootPath + "/fabric-binaries/" + _this.options.hyperledgerVersion + "/bin/peer chaincode install -n " + _this.options.name + " -v " + _this.options.version + " -p \"go_temp_code\" -l \"" + _this.options.language + "\"\n" : "\n" + _this.options.networkRootPath + "/fabric-binaries/" + _this.options.hyperledgerVersion + "/bin/peer chaincode install -n " + _this.options.name + " -v " + _this.options.version + " -p \"" + _this.options.currentPath + "\" -l \"" + _this.options.language + "\"\n") + "\n\necho \"Installed Chaincode " + _this.options.name + " version " + _this.options.version + "  at " + org + "\"\n"; }).join('') + "\nset -e\n\nsleep 10\n\necho \"Upgrading Chaincode " + _this.options.name + " version " + _this.options.version + " at " + _this.options.orgs[0] + " for channel " + _this.options.channel + "\"\n\necho \"It may take a few minutes depending on the chaincode dependencies\"\nexport CORE_PEER_MSPCONFIGPATH=" + _this.options.networkRootPath + "/artifacts/crypto-config/peerOrganizations/" + _this.options.orgs[0] + ".hurley.lab/users/Admin@" + _this.options.orgs[0] + ".hurley.lab/msp\nexport CORE_PEER_ID=peer0." + _this.options.orgs[0] + ".hurley.lab\nexport CORE_PEER_ADDRESS=" + (_this.options.insideDocker ? "peer0." + _this.options.orgs[0] + ".hurley.lab" : 'localhost') + ":" + (_this.options.insideDocker ? '7051' : "7051") + "\nexport CORE_PEER_LOCALMSPID=" + _this.options.orgs[0] + "MSP\nexport CORE_PEER_TLS_ROOTCERT_FILE=" + _this.options.networkRootPath + "/artifacts/crypto-config/peerOrganizations/" + _this.options.orgs[0] + ".hurley.lab/msp/tlscacerts/tlsca." + _this.options.orgs[0] + ".hurley.lab-cert.pem\n\n" + (_this.options.colConfig ? " echo \"Upgrading with collection " + _this.options.colConfig + "\"" : "") + "\n\n" + (_this.options.language === 'golang' ? "\n\n" + _this.options.networkRootPath + "/fabric-binaries/" + _this.options.hyperledgerVersion + "/bin/peer chaincode upgrade    -C " + _this.options.channel + "    -n " + _this.options.name + "    -v " + _this.options.version + "    -c '" + _this.options.params + "'    -P \"" + _this.getPolicy(_this.options.orgs) + "\"    -o " + (_this.options.insideDocker ? "orderer.hurley.lab" : 'localhost') + ":7050    --cafile " + _this.options.networkRootPath + "/artifacts/crypto-config/ordererOrganizations/hurley.lab/orderers/orderer.hurley.lab/msp/tlscacerts/tlsca.hurley.lab-cert.pem    " + (_this.options.colConfig ? " --collections-config \"$GOPATH/src/go_temp_code/collections/" + _this.options.colConfig.split('/')[_this.options.colConfig.split('/').length - 1] + "\"" : "") + "\n    " : "\n" + _this.options.networkRootPath + "/fabric-binaries/" + _this.options.hyperledgerVersion + "/bin/peer chaincode upgrade    -C " + _this.options.channel + "    -n " + _this.options.name + "    -v " + _this.options.version + "    -c '" + _this.options.params + "'    -P \"" + _this.getPolicy(_this.options.orgs) + "\"    -o " + (_this.options.insideDocker ? "orderer.hurley.lab" : 'localhost') + ":7050    --cafile " + _this.options.networkRootPath + "/artifacts/crypto-config/ordererOrganizations/hurley.lab/orderers/orderer.hurley.lab/msp/tlscacerts/tlsca.hurley.lab-cert.pem    " + (_this.options.colConfig ? " --collections-config \"" + path_1.resolve(process.cwd(), _this.options.colConfig) + "\"" : "") + "\n    ") + "\n\necho \"Upgraded Chaincode at " + _this.options.orgs[0] + "\"\n\nmkdir -p " + _this.options.networkRootPath + "/tasks\ntouch " + _this.success + "\n  ";
        return _this;
    }
    UpgradeChaincodeShGenerator.prototype.getPolicy = function (orgs) {
        return "OR(" + orgs
            .map(function (org) { return "'" + org + "MSP.member'"; })
            .join(',') + ")";
    };
    return UpgradeChaincodeShGenerator;
}(base_1.BaseGenerator));
exports.UpgradeChaincodeShGenerator = UpgradeChaincodeShGenerator;
//# sourceMappingURL=upgradechaincode.sh.js.map