"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path_1 = require("path");
var installchaincode_sh_1 = require("./installchaincode.sh");
var upgradechaincode_sh_1 = require("./upgradechaincode.sh");
var logs_1 = require("../utils/logs");
var ChaincodeGenerator = (function () {
    function ChaincodeGenerator(name, options) {
        this.name = name;
        this.options = options;
        this.currentPath = this.options.path ? path_1.resolve(process.cwd(), this.options.path) : process.cwd();
        this.installScript = new installchaincode_sh_1.InstallChaincodeShGenerator('installscript.sh', options.networkRootPath, {
            channel: this.options.channel || 'ch1',
            currentPath: this.currentPath,
            language: options.language,
            name: name,
            colConfig: this.options.colConfig,
            networkRootPath: options.networkRootPath,
            orgs: options.organizations,
            params: options.params || '{"Args":["init",""]}',
            version: options.version || '1.0',
            hyperledgerVersion: options.hyperledgerVersion,
            insideDocker: this.options.insideDocker,
            debug: this.options.debug
        });
        this.upgradeScript = new upgradechaincode_sh_1.UpgradeChaincodeShGenerator('upgradescript.sh', options.networkRootPath, {
            channel: this.options.channel || 'ch1',
            currentPath: this.currentPath,
            language: options.language,
            name: name,
            networkRootPath: options.networkRootPath,
            colConfig: this.options.colConfig,
            orgs: options.organizations,
            params: options.params || '{"Args":["init",""]}',
            version: options.version,
            hyperledgerVersion: options.hyperledgerVersion,
            insideDocker: this.options.insideDocker
        });
    }
    ChaincodeGenerator.prototype.save = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.installScript.save()];
                    case 1:
                        _a.sent();
                        return [4, this.upgradeScript.save()];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    ChaincodeGenerator.prototype.install = function () {
        logs_1.l("installing smart contract located at " + this.currentPath);
        return this.installScript.run();
    };
    ChaincodeGenerator.prototype.upgrade = function () {
        return this.upgradeScript.run();
    };
    return ChaincodeGenerator;
}());
exports.ChaincodeGenerator = ChaincodeGenerator;
//# sourceMappingURL=chaincodegenerator.js.map