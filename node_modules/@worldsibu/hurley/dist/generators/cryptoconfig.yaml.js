"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_1 = require("./base");
var path_1 = require("path");
var CryptoConfigOptions = (function () {
    function CryptoConfigOptions() {
    }
    return CryptoConfigOptions;
}());
exports.CryptoConfigOptions = CryptoConfigOptions;
var CryptoConfigYamlGenerator = (function (_super) {
    tslib_1.__extends(CryptoConfigYamlGenerator, _super);
    function CryptoConfigYamlGenerator(filename, path, options) {
        var _this = _super.call(this, filename, path) || this;
        _this.options = options;
        _this.contents = "\n  # ---------------------------------------------------------------------------\n  # \"OrdererOrgs\" - Definition of organizations managing orderer nodes\n  # ---------------------------------------------------------------------------\n  OrdererOrgs:\n    # ---------------------------------------------------------------------------\n    # Orderer\n    # ---------------------------------------------------------------------------\n    - Name: Orderer\n      Domain: hurley.lab\n      # ---------------------------------------------------------------------------\n      # \"Specs\" - See PeerOrgs below for complete description\n      # ---------------------------------------------------------------------------\n      Specs:\n        - Hostname: orderer\n  # ---------------------------------------------------------------------------\n  # \"PeerOrgs\" - Definition of organizations managing peer nodes\n  # ---------------------------------------------------------------------------\n  PeerOrgs:\n    # ---------------------------------------------------------------------------\n    # Org1\n    # ---------------------------------------------------------------------------\n    " + _this.options.orgs.map(function (x) { return "- Name: " + x + "\n      Domain: " + x + ".hurley.lab\n      EnableNodeOUs: true\n      # ---------------------------------------------------------------------------\n      # \"Specs\"\n      # ---------------------------------------------------------------------------\n      # Uncomment this section to enable the explicit definition of hosts in your\n      # configuration.  Most users will want to use Template, below\n      #\n      # Specs is an array of Spec entries.  Each Spec entry consists of two fields:\n      #   - Hostname:   (Required) The desired hostname, sans the domain.\n      #   - CommonName: (Optional) Specifies the template or explicit override for\n      #                 the CN.  By default, this is the template:\n      #\n      #                              \"{{.Hostname}}.{{.Domain}}\"\n      #\n      #                 which obtains its values from the Spec.Hostname and\n      #                 Org.Domain, respectively.\n      # ---------------------------------------------------------------------------\n      # Specs:\n      #   - Hostname: foo # implicitly \"foo.org1.hurley.lab\"\n      #     CommonName: foo27.org5.hurley.lab # overrides Hostname-based FQDN set above\n      #   - Hostname: bar\n      #   - Hostname: baz\n      # ---------------------------------------------------------------------------\n      # \"Template\"\n      # ---------------------------------------------------------------------------\n      # Allows for the definition of 1 or more hosts that are created sequentially\n      # from a template. By default, this looks like \"peer%d\" from 0 to Count-1.\n      # You may override the number of nodes (Count), the starting index (Start)\n      # or the template used to construct the name (Hostname).\n      #\n      # Note: Template and Specs are not mutually exclusive.  You may define both\n      # sections and the aggregate nodes will be created for you.  Take care with\n      # name collisions\n      # ---------------------------------------------------------------------------\n      Template:\n        Count: 1\n        # Start: 5\n        # Hostname: {{.Prefix}}{{.Index}} # default\n      # ---------------------------------------------------------------------------\n      # \"Users\"\n      # ---------------------------------------------------------------------------\n      # Count: The number of user accounts _in addition_ to Admin\n      # ---------------------------------------------------------------------------\n      Users:\n        Count: " + _this.options.users + "\n    "; }).join('') + "\n  ";
        _this.success = path_1.join(path, 'cryptoconfig.yaml.successful');
        return _this;
    }
    return CryptoConfigYamlGenerator;
}(base_1.BaseGenerator));
exports.CryptoConfigYamlGenerator = CryptoConfigYamlGenerator;
//# sourceMappingURL=cryptoconfig.yaml.js.map