import { Analytics } from './utils/analytics';
export declare class CLI {
    static createNetwork(organizations?: string, users?: string, channels?: string, path?: string, inside?: boolean, skipDownload?: boolean): Promise<NetworkCLI>;
    static cleanNetwork(rmi: boolean): Promise<NetworkCLI>;
    static installChaincode(chaincode: string, language: string, channel?: string, version?: string, params?: string, path?: string, ccPath?: string, colConfig?: string, inside?: boolean, debug?: boolean): Promise<ChaincodeCLI>;
    static upgradeChaincode(chaincode: string, language: string, channel?: string, version?: string, params?: string, path?: string, ccPath?: string, colConfig?: string, inside?: boolean): Promise<ChaincodeCLI>;
    static invokeChaincode(chaincode: string, fn: string, channel?: string, path?: string, user?: string, organization?: string, inside?: boolean, transientData?: string, ...args: any[]): Promise<ChaincodeCLI>;
}
export declare class NetworkCLI {
    networkRootPath: string;
    analytics: Analytics;
    constructor();
    init(organizations?: number, users?: number, channels?: number, path?: string, inside?: boolean, skipDownload?: boolean): Promise<void>;
    initNetwork(organizations?: number, users?: number, channels?: number, path?: string, insideDocker?: boolean, skipDownload?: boolean): Promise<void>;
    clean(rmi: boolean): Promise<void>;
}
export declare class ChaincodeCLI {
    private name;
    networkRootPath: string;
    analytics: Analytics;
    constructor(name: string);
    installChaincode(chaincode: string, language: string, channel?: string, version?: string, params?: string, path?: string, ccPath?: string, colConfig?: string, insideDocker?: boolean, debug?: boolean): Promise<void>;
    upgradeChaincode(chaincode: string, language: string, channel?: string, version?: string, params?: string, path?: string, ccPath?: string, colConfig?: string, insideDocker?: boolean): Promise<void>;
    invokeChaincode(chaincode: string, fn: string, channel?: string, path?: string, user?: string, organization?: string, insideDocker?: boolean, transientData?: string, ...args: any[]): Promise<void>;
}
