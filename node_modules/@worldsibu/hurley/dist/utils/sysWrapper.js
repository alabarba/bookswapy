"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ejs = require("ejs");
var fs = require("fs-extra");
var shelljs_1 = require("shelljs");
var memFs = require("mem-fs");
var memFsEditor = require("mem-fs-editor");
var logs_1 = require("./logs");
var SysWrapper;
(function (SysWrapper) {
    var d = console.log;
    function createFile(filePath, contents) {
        return new Promise(function (fulfilled, rejected) {
            try {
                write(filePath, contents, fulfilled);
            }
            catch (ex) {
                rejected(ex);
            }
        });
    }
    SysWrapper.createFile = createFile;
    function createFileFromTemplate(filePath, contents, templatePath) {
        return renderTemplateFromFile(templatePath, contents).then(function (compiledContents) {
            return new Promise(function (fulfilled, rejected) {
                try {
                    write(filePath, compiledContents, fulfilled);
                }
                catch (ex) {
                    rejected(ex);
                }
            });
        });
    }
    SysWrapper.createFileFromTemplate = createFileFromTemplate;
    function createFileRaw(filePath, contents) {
        return new Promise(function (fulfilled, rejected) {
            try {
                writeBuffer(filePath, contents, fulfilled);
            }
            catch (ex) {
                rejected(ex);
            }
        });
    }
    SysWrapper.createFileRaw = createFileRaw;
    function removePath(filePath) {
        return remove(filePath);
    }
    SysWrapper.removePath = removePath;
    function getFile(filePath, content) {
        return new Promise(function (fulfilled, rejected) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _a, store, editor, file;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!content) return [3, 2];
                            _a = fulfilled;
                            return [4, renderTemplateFromFile(filePath, content)];
                        case 1:
                            _a.apply(void 0, [_b.sent()]);
                            return [3, 3];
                        case 2:
                            store = memFs.create();
                            editor = memFsEditor.create(store);
                            try {
                                file = editor.read(filePath);
                                if (!file) {
                                    rejected('Empty or not found file.');
                                }
                                fulfilled(file);
                            }
                            catch (ex) {
                                rejected(ex);
                            }
                            _b.label = 3;
                        case 3: return [2];
                    }
                });
            });
        });
    }
    SysWrapper.getFile = getFile;
    function execFile(filePath, content) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var renderedFileContent, simpleFileContent;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!content) return [3, 2];
                        return [4, renderTemplateFromFile(filePath, content)];
                    case 1:
                        renderedFileContent = _a.sent();
                        return [2, shelljs_1.exec(renderedFileContent, { silent: false })];
                    case 2: return [4, getFile(filePath)];
                    case 3:
                        simpleFileContent = _a.sent();
                        if (shelljs_1.exec(simpleFileContent, { silent: false, shell: '/bin/bash' }).code !== 0) {
                            logs_1.l('Found error while running script!');
                            throw new Error('Errors found in script, stopping execution');
                        }
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    }
    SysWrapper.execFile = execFile;
    function execContent(content) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (shelljs_1.exec(content, { silent: false, shell: '/bin/bash' }).code !== 0) {
                    logs_1.l('Found error while running script!');
                    throw new Error('Errors found in script, stopping execution');
                }
                return [2];
            });
        });
    }
    SysWrapper.execContent = execContent;
    function getFileRaw(filePath) {
        return new Promise(function (fulfilled, rejected) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var store, editor, file;
                return tslib_1.__generator(this, function (_a) {
                    try {
                        store = memFs.create();
                        editor = memFsEditor.create(store);
                        file = editor.read(filePath, { raw: true });
                        if (!file) {
                            rejected('Empty or not found file.');
                        }
                        fulfilled(file);
                    }
                    catch (ex) {
                        rejected(ex);
                    }
                    return [2];
                });
            });
        });
    }
    SysWrapper.getFileRaw = getFileRaw;
    function copyFile(from, to) {
        return new Promise(function (fulfilled, rejected) {
            var store = memFs.create();
            var editor = memFsEditor.create(store);
            editor.copy(from, to);
            editor.commit([], fulfilled);
        });
    }
    SysWrapper.copyFile = copyFile;
    function existsPath(filePath) {
        return new Promise(function (fulfilled, rejected) {
            var store = memFs.create();
            var editor = memFsEditor.create(store);
            fulfilled(editor.exists(filePath));
        });
    }
    SysWrapper.existsPath = existsPath;
    function createJSON(filePath, contents) {
        return new Promise(function (fulfilled, rejected) {
            var store = memFs.create();
            var editor = memFsEditor.create(store);
            editor.writeJSON(filePath, contents);
            editor.commit([], fulfilled);
        });
    }
    SysWrapper.createJSON = createJSON;
    function getJSON(filePath) {
        return new Promise(function (fulfilled, rejected) {
            try {
                var store = memFs.create();
                var editor = memFsEditor.create(store);
                fulfilled(editor.readJSON(filePath));
            }
            catch (ex) {
                rejected(ex);
            }
        });
    }
    SysWrapper.getJSON = getJSON;
    function createFolder(folder) {
        return fs.ensureDir(folder);
    }
    SysWrapper.createFolder = createFolder;
    function renderTemplateFromFile(filePath, content) {
        return new Promise(function (fulfilled, rejected) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var store, editor, file, _a;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            store = memFs.create();
                            editor = memFsEditor.create(store);
                            file = editor.read(filePath);
                            if (!file) {
                                return [2, rejected(Error(filePath + " does not exist."))];
                            }
                            _a = fulfilled;
                            return [4, renderTemplateFromContent(file, content)];
                        case 1:
                            _a.apply(void 0, [_b.sent()]);
                            return [2];
                    }
                });
            });
        });
    }
    SysWrapper.renderTemplateFromFile = renderTemplateFromFile;
    function renderTemplateFromContent(templateContent, content) {
        return new Promise(function (fulfilled, rejected) {
            var renderedFile = ejs.render(templateContent, content);
            fulfilled(renderedFile);
        });
    }
    SysWrapper.renderTemplateFromContent = renderTemplateFromContent;
    function remove(filePath) {
        return fs.remove(filePath);
    }
    function write(filePath, contents, cb) {
        var store = memFs.create();
        var editor = memFsEditor.create(store);
        editor.write(filePath, contents);
        editor.commit([], cb);
    }
    function writeBuffer(filePath, contents, cb) {
        var store = memFs.create();
        var editor = memFsEditor.create(store);
        editor.write(filePath, contents);
        editor.commit([], cb);
    }
    function enumFilesInFolder(folder) {
        return new Promise(function (fulfilled, rejected) {
            fs.readdir(folder, function (err, files) {
                fulfilled(files);
            });
        });
    }
    SysWrapper.enumFilesInFolder = enumFilesInFolder;
})(SysWrapper = exports.SysWrapper || (exports.SysWrapper = {}));
//# sourceMappingURL=sysWrapper.js.map