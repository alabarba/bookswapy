"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_error_1 = require("./base.error");
var chaincodeSideMessage = 'This is a chaincode error, meaning this happened in the peer container';
var ControllerImportError = (function (_super) {
    tslib_1.__extends(ControllerImportError, _super);
    function ControllerImportError(original, pkg) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.pkg = pkg;
        _this.code = 'CTRL_IMP_ERR';
        _this.description = 'Importing the chaincode controller failed';
        _this.explanation = "\n    The module " + _this.pkg + " is not reachable\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerImportError;
}(base_error_1.BaseError));
exports.ControllerImportError = ControllerImportError;
var ControllerMissingError = (function (_super) {
    tslib_1.__extends(ControllerMissingError, _super);
    function ControllerMissingError(pkg, ctrl) {
        var _this = _super.call(this) || this;
        _this.pkg = pkg;
        _this.ctrl = ctrl;
        _this.code = 'CTRL_MISS_ERR';
        _this.description = 'The chaincode controller was not found';
        _this.explanation = "\n    The module " + _this.pkg + " does not contain a class named " + _this.ctrl + "\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerMissingError;
}(base_error_1.BaseError));
exports.ControllerMissingError = ControllerMissingError;
var ControllerNamespaceMissingError = (function (_super) {
    tslib_1.__extends(ControllerNamespaceMissingError, _super);
    function ControllerNamespaceMissingError(original, ctrl) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.ctrl = ctrl;
        _this.code = 'CTRL_NS_MISS_ERR';
        _this.description = 'The controller namespace was not found in the chaincode';
        _this.explanation = "\n    This might happen because you misspelled the controller " + _this.ctrl + " name\n    Another reason might be that you have multiple Convector versions runnin in node\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerNamespaceMissingError;
}(base_error_1.BaseError));
exports.ControllerNamespaceMissingError = ControllerNamespaceMissingError;
var ControllerInstantiationError = (function (_super) {
    tslib_1.__extends(ControllerInstantiationError, _super);
    function ControllerInstantiationError(original, ctrl) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.ctrl = ctrl;
        _this.code = 'CTRL_INST_ERR';
        _this.description = 'The controller failed to instantiate';
        _this.explanation = "\n    There might be an error in the constructor of " + _this.ctrl + ", since the call to it failed\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerInstantiationError;
}(base_error_1.BaseError));
exports.ControllerInstantiationError = ControllerInstantiationError;
var ControllerInvokablesMissingError = (function (_super) {
    tslib_1.__extends(ControllerInvokablesMissingError, _super);
    function ControllerInvokablesMissingError(original, ctrl) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.ctrl = ctrl;
        _this.code = 'CTRL_IVK_MISS_ERR';
        _this.description = 'The controller does not contain any invokable methods';
        _this.explanation = "\n    You must have forgot to include at least one @Invokable() method in your " + _this.ctrl + " controller\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerInvokablesMissingError;
}(base_error_1.BaseError));
exports.ControllerInvokablesMissingError = ControllerInvokablesMissingError;
var ControllerInvalidError = (function (_super) {
    tslib_1.__extends(ControllerInvalidError, _super);
    function ControllerInvalidError(ctrl) {
        var _this = _super.call(this) || this;
        _this.ctrl = ctrl;
        _this.code = 'CTRL_INV_ERR';
        _this.description = 'Invalid controller object';
        _this.explanation = "\n    You're using a @Controller('" + _this.ctrl + "') decorator in an invalid location\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerInvalidError;
}(base_error_1.BaseError));
exports.ControllerInvalidError = ControllerInvalidError;
var ControllerInvalidInvokeError = (function (_super) {
    tslib_1.__extends(ControllerInvalidInvokeError, _super);
    function ControllerInvalidInvokeError(fn, args, schemas) {
        if (args === void 0) { args = 0; }
        if (schemas === void 0) { schemas = 0; }
        var _this = _super.call(this) || this;
        _this.fn = fn;
        _this.args = args;
        _this.schemas = schemas;
        _this.code = 'CTRL_INV_ARGS_ERR';
        _this.description = 'Invalid function invocation arguments';
        _this.explanation = "\n    Function " + _this.fn + " invoked with " + _this.args + " params but " + _this.schemas + " expected\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerInvalidInvokeError;
}(base_error_1.BaseError));
exports.ControllerInvalidInvokeError = ControllerInvalidInvokeError;
var ControllerInvalidArgumentError = (function (_super) {
    tslib_1.__extends(ControllerInvalidArgumentError, _super);
    function ControllerInvalidArgumentError(original, index, value) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.index = index;
        _this.value = value;
        _this.code = 'CTRL_INV_ARG_ERR';
        _this.description = 'Invalid argument passed in controller';
        _this.explanation = "\n    Invalid argument #" + _this.index + " using value " + _this.value + "\n    This argument doesn't seem to be passing the yup validations\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerInvalidArgumentError;
}(base_error_1.BaseError));
exports.ControllerInvalidArgumentError = ControllerInvalidArgumentError;
var ControllerArgumentParseError = (function (_super) {
    tslib_1.__extends(ControllerArgumentParseError, _super);
    function ControllerArgumentParseError(original, index, value) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.index = index;
        _this.value = value;
        _this.code = 'CTRL_ARG_PRS_ERR';
        _this.description = 'Argument parse error';
        _this.explanation = "\n    Argument #" + _this.index + " using value " + _this.value + "\n    Something is crashing while we're trying to parse the argument\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerArgumentParseError;
}(base_error_1.BaseError));
exports.ControllerArgumentParseError = ControllerArgumentParseError;
var ControllerInvalidFunctionError = (function (_super) {
    tslib_1.__extends(ControllerInvalidFunctionError, _super);
    function ControllerInvalidFunctionError() {
        var _this = _super.call(this) || this;
        _this.code = 'CTRL_INV_FN_ERR';
        _this.description = 'Invokable controller function is invalid';
        _this.explanation = "\n    The operator @Invokable() was used in an invalid object\n    " + chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ControllerInvalidFunctionError;
}(base_error_1.BaseError));
exports.ControllerInvalidFunctionError = ControllerInvalidFunctionError;
//# sourceMappingURL=controller.errors.js.map