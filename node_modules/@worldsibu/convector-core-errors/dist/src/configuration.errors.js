"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_error_1 = require("./base.error");
var common_1 = require("./common");
var ConfigurationInvalidError = (function (_super) {
    tslib_1.__extends(ConfigurationInvalidError, _super);
    function ConfigurationInvalidError(original) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.code = 'CFG_INV_ERR';
        _this.description = 'The chaincode configuration is not valid';
        _this.explanation = "\n    " + common_1.chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ConfigurationInvalidError;
}(base_error_1.BaseError));
exports.ConfigurationInvalidError = ConfigurationInvalidError;
var ConfigurationParseError = (function (_super) {
    tslib_1.__extends(ConfigurationParseError, _super);
    function ConfigurationParseError(original, json) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.json = json;
        _this.code = 'CFG_PARS_ERR';
        _this.description = 'The configuration object cannot be parsed';
        _this.explanation = "\n    There might be an error in your json, it seems to be invalid\n\n    " + _this.json + "\n\n    " + common_1.chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ConfigurationParseError;
}(base_error_1.BaseError));
exports.ConfigurationParseError = ConfigurationParseError;
var ConfigurationFileOpenError = (function (_super) {
    tslib_1.__extends(ConfigurationFileOpenError, _super);
    function ConfigurationFileOpenError(original, file) {
        var _this = _super.call(this) || this;
        _this.original = original;
        _this.file = file;
        _this.code = 'CFG_OPN_ERR';
        _this.description = 'The configuration file cannot be opened';
        _this.explanation = "\n    Failed to open or read " + _this.file + "\n    Make sure the file you provided is exists and is the current user has the necessary permissions to read it\n    " + common_1.chaincodeSideMessage;
        _this.message = _super.prototype.getMessage.call(_this, _super.prototype.getOriginal.call(_this));
        return _this;
    }
    return ConfigurationFileOpenError;
}(base_error_1.BaseError));
exports.ConfigurationFileOpenError = ConfigurationFileOpenError;
//# sourceMappingURL=configuration.errors.js.map